// Code generated by ent, DO NOT EDIT.

package permission

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Permission {
	return predicate.Permission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Permission {
	return predicate.Permission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Permission {
	return predicate.Permission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Permission {
	return predicate.Permission(sql.FieldLTE(FieldID, id))
}

// PermissionName applies equality check predicate on the "permissionName" field. It's identical to PermissionNameEQ.
func PermissionName(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldPermissionName, v))
}

// URI applies equality check predicate on the "uri" field. It's identical to URIEQ.
func URI(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldURI, v))
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldMethod, v))
}

// PermissionNameEQ applies the EQ predicate on the "permissionName" field.
func PermissionNameEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldPermissionName, v))
}

// PermissionNameNEQ applies the NEQ predicate on the "permissionName" field.
func PermissionNameNEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldPermissionName, v))
}

// PermissionNameIn applies the In predicate on the "permissionName" field.
func PermissionNameIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldPermissionName, vs...))
}

// PermissionNameNotIn applies the NotIn predicate on the "permissionName" field.
func PermissionNameNotIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldPermissionName, vs...))
}

// PermissionNameGT applies the GT predicate on the "permissionName" field.
func PermissionNameGT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGT(FieldPermissionName, v))
}

// PermissionNameGTE applies the GTE predicate on the "permissionName" field.
func PermissionNameGTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGTE(FieldPermissionName, v))
}

// PermissionNameLT applies the LT predicate on the "permissionName" field.
func PermissionNameLT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLT(FieldPermissionName, v))
}

// PermissionNameLTE applies the LTE predicate on the "permissionName" field.
func PermissionNameLTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLTE(FieldPermissionName, v))
}

// PermissionNameContains applies the Contains predicate on the "permissionName" field.
func PermissionNameContains(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContains(FieldPermissionName, v))
}

// PermissionNameHasPrefix applies the HasPrefix predicate on the "permissionName" field.
func PermissionNameHasPrefix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasPrefix(FieldPermissionName, v))
}

// PermissionNameHasSuffix applies the HasSuffix predicate on the "permissionName" field.
func PermissionNameHasSuffix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasSuffix(FieldPermissionName, v))
}

// PermissionNameEqualFold applies the EqualFold predicate on the "permissionName" field.
func PermissionNameEqualFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEqualFold(FieldPermissionName, v))
}

// PermissionNameContainsFold applies the ContainsFold predicate on the "permissionName" field.
func PermissionNameContainsFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContainsFold(FieldPermissionName, v))
}

// URIEQ applies the EQ predicate on the "uri" field.
func URIEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldURI, v))
}

// URINEQ applies the NEQ predicate on the "uri" field.
func URINEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldURI, v))
}

// URIIn applies the In predicate on the "uri" field.
func URIIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldURI, vs...))
}

// URINotIn applies the NotIn predicate on the "uri" field.
func URINotIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldURI, vs...))
}

// URIGT applies the GT predicate on the "uri" field.
func URIGT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGT(FieldURI, v))
}

// URIGTE applies the GTE predicate on the "uri" field.
func URIGTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGTE(FieldURI, v))
}

// URILT applies the LT predicate on the "uri" field.
func URILT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLT(FieldURI, v))
}

// URILTE applies the LTE predicate on the "uri" field.
func URILTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLTE(FieldURI, v))
}

// URIContains applies the Contains predicate on the "uri" field.
func URIContains(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContains(FieldURI, v))
}

// URIHasPrefix applies the HasPrefix predicate on the "uri" field.
func URIHasPrefix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasPrefix(FieldURI, v))
}

// URIHasSuffix applies the HasSuffix predicate on the "uri" field.
func URIHasSuffix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasSuffix(FieldURI, v))
}

// URIEqualFold applies the EqualFold predicate on the "uri" field.
func URIEqualFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEqualFold(FieldURI, v))
}

// URIContainsFold applies the ContainsFold predicate on the "uri" field.
func URIContainsFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContainsFold(FieldURI, v))
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldMethod, v))
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldMethod, v))
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldMethod, vs...))
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldMethod, vs...))
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGT(FieldMethod, v))
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGTE(FieldMethod, v))
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLT(FieldMethod, v))
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLTE(FieldMethod, v))
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContains(FieldMethod, v))
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasPrefix(FieldMethod, v))
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasSuffix(FieldMethod, v))
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEqualFold(FieldMethod, v))
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContainsFold(FieldMethod, v))
}

// HasPermissions applies the HasEdge predicate on the "permissions" edge.
func HasPermissions() predicate.Permission {
	return predicate.Permission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PermissionsTable, PermissionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionsWith applies the HasEdge predicate on the "permissions" edge with a given conditions (other predicates).
func HasPermissionsWith(preds ...predicate.Permission) predicate.Permission {
	return predicate.Permission(func(s *sql.Selector) {
		step := newPermissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Permission) predicate.Permission {
	return predicate.Permission(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Permission) predicate.Permission {
	return predicate.Permission(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Permission) predicate.Permission {
	return predicate.Permission(sql.NotPredicates(p))
}
