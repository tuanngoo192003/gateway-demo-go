// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountsColumns holds the columns for the "accounts" table.
	AccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "phone_number", Type: field.TypeString},
		{Name: "o_auth_type", Type: field.TypeEnum, Enums: []string{"GOOGLE", "FACEBOOK", "GITHUB"}, Default: "GOOGLE"},
		{Name: "role_accounts", Type: field.TypeUUID},
	}
	// AccountsTable holds the schema information for the "accounts" table.
	AccountsTable = &schema.Table{
		Name:       "accounts",
		Columns:    AccountsColumns,
		PrimaryKey: []*schema.Column{AccountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "accounts_roles_accounts",
				Columns:    []*schema.Column{AccountsColumns[6]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "permission_name", Type: field.TypeString},
		{Name: "uri", Type: field.TypeString},
		{Name: "method", Type: field.TypeString},
		{Name: "role_permissions", Type: field.TypeUUID, Nullable: true},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "permissions_roles_permissions",
				Columns:    []*schema.Column{PermissionsColumns[4]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RefreshTokensColumns holds the columns for the "refresh_tokens" table.
	RefreshTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "token", Type: field.TypeString},
		{Name: "expired_at", Type: field.TypeString},
		{Name: "role_name", Type: field.TypeEnum, Enums: []string{"ADMIN", "MANAGER", "CUSTOMER"}, Default: "CUSTOMER"},
	}
	// RefreshTokensTable holds the schema information for the "refresh_tokens" table.
	RefreshTokensTable = &schema.Table{
		Name:       "refresh_tokens",
		Columns:    RefreshTokensColumns,
		PrimaryKey: []*schema.Column{RefreshTokensColumns[0]},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "role_name", Type: field.TypeEnum, Enums: []string{"ADMIN", "MANAGER", "CUSTOMER"}, Default: "CUSTOMER"},
		{Name: "description", Type: field.TypeString},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
	}
	// PermissionPermissionsColumns holds the columns for the "permission_permissions" table.
	PermissionPermissionsColumns = []*schema.Column{
		{Name: "permission_id", Type: field.TypeUUID},
		{Name: "permission_id", Type: field.TypeUUID},
	}
	// PermissionPermissionsTable holds the schema information for the "permission_permissions" table.
	PermissionPermissionsTable = &schema.Table{
		Name:       "permission_permissions",
		Columns:    PermissionPermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionPermissionsColumns[0], PermissionPermissionsColumns[1], PermissionPermissionsColumns[0], PermissionPermissionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "permission_permissions_permission_id",
				Columns:    []*schema.Column{PermissionPermissionsColumns[0], PermissionPermissionsColumns[1]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "permission_permissions_permission_id",
				Columns:    []*schema.Column{PermissionPermissionsColumns[0], PermissionPermissionsColumns[1]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountsTable,
		PermissionsTable,
		RefreshTokensTable,
		RolesTable,
		PermissionPermissionsTable,
	}
)

func init() {
	AccountsTable.ForeignKeys[0].RefTable = RolesTable
	PermissionsTable.ForeignKeys[0].RefTable = RolesTable
	PermissionPermissionsTable.ForeignKeys[0].RefTable = PermissionsTable
	PermissionPermissionsTable.ForeignKeys[1].RefTable = PermissionsTable
}
