// Code generated by ent, DO NOT EDIT.

package refreshtoken

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the refreshtoken type in the database.
	Label = "refresh_token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldExpiredAt holds the string denoting the expiredat field in the database.
	FieldExpiredAt = "expired_at"
	// FieldRoleName holds the string denoting the rolename field in the database.
	FieldRoleName = "role_name"
	// Table holds the table name of the refreshtoken in the database.
	Table = "refresh_tokens"
)

// Columns holds all SQL columns for refreshtoken fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldToken,
	FieldExpiredAt,
	FieldRoleName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// RoleName defines the type for the "roleName" enum field.
type RoleName string

// RoleNameCUSTOMER is the default value of the RoleName enum.
const DefaultRoleName = RoleNameCUSTOMER

// RoleName values.
const (
	RoleNameADMIN    RoleName = "ADMIN"
	RoleNameMANAGER  RoleName = "MANAGER"
	RoleNameCUSTOMER RoleName = "CUSTOMER"
)

func (rn RoleName) String() string {
	return string(rn)
}

// RoleNameValidator is a validator for the "roleName" field enum values. It is called by the builders before save.
func RoleNameValidator(rn RoleName) error {
	switch rn {
	case RoleNameADMIN, RoleNameMANAGER, RoleNameCUSTOMER:
		return nil
	default:
		return fmt.Errorf("refreshtoken: invalid enum value for roleName field: %q", rn)
	}
}

// OrderOption defines the ordering options for the RefreshToken queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// ByExpiredAt orders the results by the expiredAt field.
func ByExpiredAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiredAt, opts...).ToFunc()
}

// ByRoleName orders the results by the roleName field.
func ByRoleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleName, opts...).ToFunc()
}
