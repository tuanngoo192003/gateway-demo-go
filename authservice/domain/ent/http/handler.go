// Code generated by ent, DO NOT EDIT.

package http

import (
	"strings"

	"github.com/go-chi/chi/v5"
	"github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent"
	"go.uber.org/zap"
)

// NewHandler returns a ready to use handler with all generated endpoints mounted.
func NewHandler(c *ent.Client, l *zap.Logger) chi.Router {
	r := chi.NewRouter()
	MountRoutes(c, l, r)
	return r
}

// MountRoutes mounts all generated routes on the given router.
func MountRoutes(c *ent.Client, l *zap.Logger, r chi.Router) {
	NewAccountHandler(c, l).MountRoutes(r)
	NewPermissionHandler(c, l).MountRoutes(r)
	NewRefreshTokenHandler(c, l).MountRoutes(r)
	NewRoleHandler(c, l).MountRoutes(r)
}

// AccountHandler handles http crud operations on ent.Account.
type AccountHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewAccountHandler(c *ent.Client, l *zap.Logger) *AccountHandler {
	return &AccountHandler{
		client: c,
		log:    l.With(zap.String("handler", "AccountHandler")),
	}
}
func (h *AccountHandler) MountCreateRoute(r chi.Router) *AccountHandler {
	r.Post("/accounts", h.Create)
	return h
}
func (h *AccountHandler) MountReadRoute(r chi.Router) *AccountHandler {
	r.Get("/accounts/{id}", h.Read)
	return h
}
func (h *AccountHandler) MountUpdateRoute(r chi.Router) *AccountHandler {
	r.Patch("/accounts/{id}", h.Update)
	return h
}
func (h *AccountHandler) MountDeleteRoute(r chi.Router) *AccountHandler {
	r.Delete("/accounts/{id}", h.Delete)
	return h
}
func (h *AccountHandler) MountListRoute(r chi.Router) *AccountHandler {
	r.Get("/accounts", h.List)
	return h
}
func (h *AccountHandler) MountRoleRoute(r chi.Router) *AccountHandler {
	r.Get("/accounts/{id}/role", h.Role)
	return h
}
func (h *AccountHandler) MountRoutes(r chi.Router) {
	h.MountCreateRoute(r).MountReadRoute(r).MountUpdateRoute(r).MountDeleteRoute(r).MountListRoute(r).MountRoleRoute(r)
}

// PermissionHandler handles http crud operations on ent.Permission.
type PermissionHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewPermissionHandler(c *ent.Client, l *zap.Logger) *PermissionHandler {
	return &PermissionHandler{
		client: c,
		log:    l.With(zap.String("handler", "PermissionHandler")),
	}
}
func (h *PermissionHandler) MountCreateRoute(r chi.Router) *PermissionHandler {
	r.Post("/permissions", h.Create)
	return h
}
func (h *PermissionHandler) MountReadRoute(r chi.Router) *PermissionHandler {
	r.Get("/permissions/{id}", h.Read)
	return h
}
func (h *PermissionHandler) MountUpdateRoute(r chi.Router) *PermissionHandler {
	r.Patch("/permissions/{id}", h.Update)
	return h
}
func (h *PermissionHandler) MountDeleteRoute(r chi.Router) *PermissionHandler {
	r.Delete("/permissions/{id}", h.Delete)
	return h
}
func (h *PermissionHandler) MountListRoute(r chi.Router) *PermissionHandler {
	r.Get("/permissions", h.List)
	return h
}
func (h *PermissionHandler) MountPermissionsRoute(r chi.Router) *PermissionHandler {
	r.Get("/permissions/{id}/permissions", h.Permissions)
	return h
}
func (h *PermissionHandler) MountRoutes(r chi.Router) {
	h.MountCreateRoute(r).MountReadRoute(r).MountUpdateRoute(r).MountDeleteRoute(r).MountListRoute(r).MountPermissionsRoute(r)
}

// RefreshTokenHandler handles http crud operations on ent.RefreshToken.
type RefreshTokenHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewRefreshTokenHandler(c *ent.Client, l *zap.Logger) *RefreshTokenHandler {
	return &RefreshTokenHandler{
		client: c,
		log:    l.With(zap.String("handler", "RefreshTokenHandler")),
	}
}
func (h *RefreshTokenHandler) MountCreateRoute(r chi.Router) *RefreshTokenHandler {
	r.Post("/refresh-tokens", h.Create)
	return h
}
func (h *RefreshTokenHandler) MountReadRoute(r chi.Router) *RefreshTokenHandler {
	r.Get("/refresh-tokens/{id}", h.Read)
	return h
}
func (h *RefreshTokenHandler) MountUpdateRoute(r chi.Router) *RefreshTokenHandler {
	r.Patch("/refresh-tokens/{id}", h.Update)
	return h
}
func (h *RefreshTokenHandler) MountDeleteRoute(r chi.Router) *RefreshTokenHandler {
	r.Delete("/refresh-tokens/{id}", h.Delete)
	return h
}
func (h *RefreshTokenHandler) MountListRoute(r chi.Router) *RefreshTokenHandler {
	r.Get("/refresh-tokens", h.List)
	return h
}
func (h *RefreshTokenHandler) MountRoutes(r chi.Router) {
	h.MountCreateRoute(r).MountReadRoute(r).MountUpdateRoute(r).MountDeleteRoute(r).MountListRoute(r)
}

// RoleHandler handles http crud operations on ent.Role.
type RoleHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewRoleHandler(c *ent.Client, l *zap.Logger) *RoleHandler {
	return &RoleHandler{
		client: c,
		log:    l.With(zap.String("handler", "RoleHandler")),
	}
}
func (h *RoleHandler) MountCreateRoute(r chi.Router) *RoleHandler {
	r.Post("/roles", h.Create)
	return h
}
func (h *RoleHandler) MountReadRoute(r chi.Router) *RoleHandler {
	r.Get("/roles/{id}", h.Read)
	return h
}
func (h *RoleHandler) MountUpdateRoute(r chi.Router) *RoleHandler {
	r.Patch("/roles/{id}", h.Update)
	return h
}
func (h *RoleHandler) MountDeleteRoute(r chi.Router) *RoleHandler {
	r.Delete("/roles/{id}", h.Delete)
	return h
}
func (h *RoleHandler) MountListRoute(r chi.Router) *RoleHandler {
	r.Get("/roles", h.List)
	return h
}
func (h *RoleHandler) MountPermissionsRoute(r chi.Router) *RoleHandler {
	r.Get("/roles/{id}/permissions", h.Permissions)
	return h
}
func (h *RoleHandler) MountAccountsRoute(r chi.Router) *RoleHandler {
	r.Get("/roles/{id}/accounts", h.Accounts)
	return h
}
func (h *RoleHandler) MountRoutes(r chi.Router) {
	h.MountCreateRoute(r).MountReadRoute(r).MountUpdateRoute(r).MountDeleteRoute(r).MountListRoute(r).MountPermissionsRoute(r).MountAccountsRoute(r)
}

func stripEntError(err error) string {
	return strings.TrimPrefix(err.Error(), "ent: ")
}

func zapFields(errs map[string]string) []zap.Field {
	if errs == nil || len(errs) == 0 {
		return nil
	}
	r := make([]zap.Field, 0)
	for k, v := range errs {
		r = append(r, zap.String(k, v))
	}
	return r
}
