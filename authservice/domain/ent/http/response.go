// Code generated by ent, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"

	"github.com/google/uuid"
	"github.com/mailru/easyjson"
	"github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent"
	account "github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/account"
	"github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/refreshtoken"
	role "github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/role"
)

// Basic HTTP Error Response
type ErrResponse struct {
	Code   int         `json:"code"`             // http response status code
	Status string      `json:"status"`           // user-level status message
	Errors interface{} `json:"errors,omitempty"` // application-level error
}

func (e ErrResponse) MarshalToHTTPResponseWriter(w http.ResponseWriter) (int, error) {
	d, err := easyjson.Marshal(e)
	if err != nil {
		return 0, err
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("Content-Length", strconv.Itoa(len(d)))
	w.WriteHeader(e.Code)
	return w.Write(d)
}

func BadRequest(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusBadRequest,
		Status: http.StatusText(http.StatusBadRequest),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Conflict(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusConflict,
		Status: http.StatusText(http.StatusConflict),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Forbidden(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusForbidden,
		Status: http.StatusText(http.StatusForbidden),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func InternalServerError(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusInternalServerError,
		Status: http.StatusText(http.StatusInternalServerError),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func NotFound(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusNotFound,
		Status: http.StatusText(http.StatusNotFound),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Unauthorized(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusUnauthorized,
		Status: http.StatusText(http.StatusUnauthorized),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

type (
	// Account2555118887View represents the data serialized for the following serialization group combinations:
	// []
	Account2555118887View struct {
		ID          uuid.UUID         `json:"id,omitempty"`
		Username    string            `json:"username,omitempty"`
		Email       string            `json:"email,omitempty"`
		PhoneNumber string            `json:"phoneNumber,omitempty"`
		OAuthType   account.OAuthType `json:"oAuthType,omitempty"`
	}
	Account2555118887Views []*Account2555118887View
)

func NewAccount2555118887View(e *ent.Account) *Account2555118887View {
	if e == nil {
		return nil
	}
	return &Account2555118887View{
		ID:          e.ID,
		Username:    e.Username,
		Email:       e.Email,
		PhoneNumber: e.PhoneNumber,
		OAuthType:   e.OAuthType,
	}
}

func NewAccount2555118887Views(es []*ent.Account) Account2555118887Views {
	if len(es) == 0 {
		return nil
	}
	r := make(Account2555118887Views, len(es))
	for i, e := range es {
		r[i] = NewAccount2555118887View(e)
	}
	return r
}

type (
	// Permission4235299754View represents the data serialized for the following serialization group combinations:
	// []
	Permission4235299754View struct {
		ID             uuid.UUID `json:"id,omitempty"`
		PermissionName string    `json:"permissionName,omitempty"`
		URI            string    `json:"uri,omitempty"`
		Method         string    `json:"method,omitempty"`
	}
	Permission4235299754Views []*Permission4235299754View
)

func NewPermission4235299754View(e *ent.Permission) *Permission4235299754View {
	if e == nil {
		return nil
	}
	return &Permission4235299754View{
		ID:             e.ID,
		PermissionName: e.PermissionName,
		URI:            e.URI,
		Method:         e.Method,
	}
}

func NewPermission4235299754Views(es []*ent.Permission) Permission4235299754Views {
	if len(es) == 0 {
		return nil
	}
	r := make(Permission4235299754Views, len(es))
	for i, e := range es {
		r[i] = NewPermission4235299754View(e)
	}
	return r
}

type (
	// RefreshToken3828610044View represents the data serialized for the following serialization group combinations:
	// []
	RefreshToken3828610044View struct {
		ID        uuid.UUID             `json:"id,omitempty"`
		Username  string                `json:"username,omitempty"`
		Token     string                `json:"token,omitempty"`
		ExpiredAt string                `json:"expiredAt,omitempty"`
		RoleName  refreshtoken.RoleName `json:"roleName,omitempty"`
	}
	RefreshToken3828610044Views []*RefreshToken3828610044View
)

func NewRefreshToken3828610044View(e *ent.RefreshToken) *RefreshToken3828610044View {
	if e == nil {
		return nil
	}
	return &RefreshToken3828610044View{
		ID:        e.ID,
		Username:  e.Username,
		Token:     e.Token,
		ExpiredAt: e.ExpiredAt,
		RoleName:  e.RoleName,
	}
}

func NewRefreshToken3828610044Views(es []*ent.RefreshToken) RefreshToken3828610044Views {
	if len(es) == 0 {
		return nil
	}
	r := make(RefreshToken3828610044Views, len(es))
	for i, e := range es {
		r[i] = NewRefreshToken3828610044View(e)
	}
	return r
}

type (
	// Role736703411View represents the data serialized for the following serialization group combinations:
	// []
	Role736703411View struct {
		ID          uuid.UUID     `json:"id,omitempty"`
		RoleName    role.RoleName `json:"roleName,omitempty"`
		Description string        `json:"description,omitempty"`
	}
	Role736703411Views []*Role736703411View
)

func NewRole736703411View(e *ent.Role) *Role736703411View {
	if e == nil {
		return nil
	}
	return &Role736703411View{
		ID:          e.ID,
		RoleName:    e.RoleName,
		Description: e.Description,
	}
}

func NewRole736703411Views(es []*ent.Role) Role736703411Views {
	if len(es) == 0 {
		return nil
	}
	r := make(Role736703411Views, len(es))
	for i, e := range es {
		r[i] = NewRole736703411View(e)
	}
	return r
}
