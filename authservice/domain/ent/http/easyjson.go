// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package http

import (
	json "encoding/json"
	uuid "github.com/google/uuid"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	account "github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/account"
	refreshtoken "github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/refreshtoken"
	role "github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/role"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp(in *jlexer.Lexer, out *RoleUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "roleName":
			if in.IsNull() {
				in.Skip()
				out.RoleName = nil
			} else {
				if out.RoleName == nil {
					out.RoleName = new(role.RoleName)
				}
				*out.RoleName = role.RoleName(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]uuid.UUID, 0, 4)
					} else {
						out.Permissions = []uuid.UUID{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 uuid.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v1).UnmarshalText(data))
					}
					out.Permissions = append(out.Permissions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "accounts":
			if in.IsNull() {
				in.Skip()
				out.Accounts = nil
			} else {
				in.Delim('[')
				if out.Accounts == nil {
					if !in.IsDelim(']') {
						out.Accounts = make([]uuid.UUID, 0, 4)
					} else {
						out.Accounts = []uuid.UUID{}
					}
				} else {
					out.Accounts = (out.Accounts)[:0]
				}
				for !in.IsDelim(']') {
					var v2 uuid.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v2).UnmarshalText(data))
					}
					out.Accounts = append(out.Accounts, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp(out *jwriter.Writer, in RoleUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"roleName\":"
		out.RawString(prefix[1:])
		if in.RoleName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.RoleName))
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Permissions {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.RawText((v4).MarshalText())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"accounts\":"
		out.RawString(prefix)
		if in.Accounts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Accounts {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.RawText((v6).MarshalText())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoleUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoleUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp(l, v)
}
func easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp1(in *jlexer.Lexer, out *RoleCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "roleName":
			if in.IsNull() {
				in.Skip()
				out.RoleName = nil
			} else {
				if out.RoleName == nil {
					out.RoleName = new(role.RoleName)
				}
				*out.RoleName = role.RoleName(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]uuid.UUID, 0, 4)
					} else {
						out.Permissions = []uuid.UUID{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v7 uuid.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v7).UnmarshalText(data))
					}
					out.Permissions = append(out.Permissions, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "accounts":
			if in.IsNull() {
				in.Skip()
				out.Accounts = nil
			} else {
				in.Delim('[')
				if out.Accounts == nil {
					if !in.IsDelim(']') {
						out.Accounts = make([]uuid.UUID, 0, 4)
					} else {
						out.Accounts = []uuid.UUID{}
					}
				} else {
					out.Accounts = (out.Accounts)[:0]
				}
				for !in.IsDelim(']') {
					var v8 uuid.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v8).UnmarshalText(data))
					}
					out.Accounts = append(out.Accounts, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp1(out *jwriter.Writer, in RoleCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"roleName\":"
		out.RawString(prefix[1:])
		if in.RoleName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.RoleName))
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Permissions {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.RawText((v10).MarshalText())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"accounts\":"
		out.RawString(prefix)
		if in.Accounts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Accounts {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.RawText((v12).MarshalText())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoleCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoleCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp1(l, v)
}
func easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp2(in *jlexer.Lexer, out *Role736703411Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Role736703411Views, 0, 8)
			} else {
				*out = Role736703411Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v13 *Role736703411View
			if in.IsNull() {
				in.Skip()
				v13 = nil
			} else {
				if v13 == nil {
					v13 = new(Role736703411View)
				}
				(*v13).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v13)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp2(out *jwriter.Writer, in Role736703411Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in {
			if v14 > 0 {
				out.RawByte(',')
			}
			if v15 == nil {
				out.RawString("null")
			} else {
				(*v15).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Role736703411Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Role736703411Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp2(l, v)
}
func easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp3(in *jlexer.Lexer, out *Role736703411View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "roleName":
			out.RoleName = role.RoleName(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp3(out *jwriter.Writer, in Role736703411View) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	if in.RoleName != "" {
		const prefix string = ",\"roleName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RoleName))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Role736703411View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Role736703411View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp3(l, v)
}
func easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp4(in *jlexer.Lexer, out *RefreshTokenUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			if in.IsNull() {
				in.Skip()
				out.Username = nil
			} else {
				if out.Username == nil {
					out.Username = new(string)
				}
				*out.Username = string(in.String())
			}
		case "token":
			if in.IsNull() {
				in.Skip()
				out.Token = nil
			} else {
				if out.Token == nil {
					out.Token = new(string)
				}
				*out.Token = string(in.String())
			}
		case "expiredAt":
			if in.IsNull() {
				in.Skip()
				out.ExpiredAt = nil
			} else {
				if out.ExpiredAt == nil {
					out.ExpiredAt = new(string)
				}
				*out.ExpiredAt = string(in.String())
			}
		case "roleName":
			if in.IsNull() {
				in.Skip()
				out.RoleName = nil
			} else {
				if out.RoleName == nil {
					out.RoleName = new(refreshtoken.RoleName)
				}
				*out.RoleName = refreshtoken.RoleName(in.String())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp4(out *jwriter.Writer, in RefreshTokenUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		if in.Username == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Username))
		}
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		if in.Token == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Token))
		}
	}
	{
		const prefix string = ",\"expiredAt\":"
		out.RawString(prefix)
		if in.ExpiredAt == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ExpiredAt))
		}
	}
	{
		const prefix string = ",\"roleName\":"
		out.RawString(prefix)
		if in.RoleName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.RoleName))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefreshTokenUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefreshTokenUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp4(l, v)
}
func easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp5(in *jlexer.Lexer, out *RefreshTokenCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			if in.IsNull() {
				in.Skip()
				out.Username = nil
			} else {
				if out.Username == nil {
					out.Username = new(string)
				}
				*out.Username = string(in.String())
			}
		case "token":
			if in.IsNull() {
				in.Skip()
				out.Token = nil
			} else {
				if out.Token == nil {
					out.Token = new(string)
				}
				*out.Token = string(in.String())
			}
		case "expiredAt":
			if in.IsNull() {
				in.Skip()
				out.ExpiredAt = nil
			} else {
				if out.ExpiredAt == nil {
					out.ExpiredAt = new(string)
				}
				*out.ExpiredAt = string(in.String())
			}
		case "roleName":
			if in.IsNull() {
				in.Skip()
				out.RoleName = nil
			} else {
				if out.RoleName == nil {
					out.RoleName = new(refreshtoken.RoleName)
				}
				*out.RoleName = refreshtoken.RoleName(in.String())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp5(out *jwriter.Writer, in RefreshTokenCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		if in.Username == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Username))
		}
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		if in.Token == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Token))
		}
	}
	{
		const prefix string = ",\"expiredAt\":"
		out.RawString(prefix)
		if in.ExpiredAt == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ExpiredAt))
		}
	}
	{
		const prefix string = ",\"roleName\":"
		out.RawString(prefix)
		if in.RoleName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.RoleName))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefreshTokenCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefreshTokenCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp5(l, v)
}
func easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp6(in *jlexer.Lexer, out *RefreshToken3828610044Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(RefreshToken3828610044Views, 0, 8)
			} else {
				*out = RefreshToken3828610044Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v16 *RefreshToken3828610044View
			if in.IsNull() {
				in.Skip()
				v16 = nil
			} else {
				if v16 == nil {
					v16 = new(RefreshToken3828610044View)
				}
				(*v16).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v16)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp6(out *jwriter.Writer, in RefreshToken3828610044Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v17, v18 := range in {
			if v17 > 0 {
				out.RawByte(',')
			}
			if v18 == nil {
				out.RawString("null")
			} else {
				(*v18).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefreshToken3828610044Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefreshToken3828610044Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp6(l, v)
}
func easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp7(in *jlexer.Lexer, out *RefreshToken3828610044View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "username":
			out.Username = string(in.String())
		case "token":
			out.Token = string(in.String())
		case "expiredAt":
			out.ExpiredAt = string(in.String())
		case "roleName":
			out.RoleName = refreshtoken.RoleName(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp7(out *jwriter.Writer, in RefreshToken3828610044View) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	if in.Token != "" {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	if in.ExpiredAt != "" {
		const prefix string = ",\"expiredAt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExpiredAt))
	}
	if in.RoleName != "" {
		const prefix string = ",\"roleName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RoleName))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefreshToken3828610044View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefreshToken3828610044View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp7(l, v)
}
func easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp8(in *jlexer.Lexer, out *PermissionUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "permissionName":
			if in.IsNull() {
				in.Skip()
				out.PermissionName = nil
			} else {
				if out.PermissionName == nil {
					out.PermissionName = new(string)
				}
				*out.PermissionName = string(in.String())
			}
		case "uri":
			if in.IsNull() {
				in.Skip()
				out.URI = nil
			} else {
				if out.URI == nil {
					out.URI = new(string)
				}
				*out.URI = string(in.String())
			}
		case "method":
			if in.IsNull() {
				in.Skip()
				out.Method = nil
			} else {
				if out.Method == nil {
					out.Method = new(string)
				}
				*out.Method = string(in.String())
			}
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]uuid.UUID, 0, 4)
					} else {
						out.Permissions = []uuid.UUID{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v19 uuid.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v19).UnmarshalText(data))
					}
					out.Permissions = append(out.Permissions, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp8(out *jwriter.Writer, in PermissionUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"permissionName\":"
		out.RawString(prefix[1:])
		if in.PermissionName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PermissionName))
		}
	}
	{
		const prefix string = ",\"uri\":"
		out.RawString(prefix)
		if in.URI == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.URI))
		}
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		if in.Method == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Method))
		}
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Permissions {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.RawText((v21).MarshalText())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PermissionUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PermissionUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp8(l, v)
}
func easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp9(in *jlexer.Lexer, out *PermissionCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "permissionName":
			if in.IsNull() {
				in.Skip()
				out.PermissionName = nil
			} else {
				if out.PermissionName == nil {
					out.PermissionName = new(string)
				}
				*out.PermissionName = string(in.String())
			}
		case "uri":
			if in.IsNull() {
				in.Skip()
				out.URI = nil
			} else {
				if out.URI == nil {
					out.URI = new(string)
				}
				*out.URI = string(in.String())
			}
		case "method":
			if in.IsNull() {
				in.Skip()
				out.Method = nil
			} else {
				if out.Method == nil {
					out.Method = new(string)
				}
				*out.Method = string(in.String())
			}
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]uuid.UUID, 0, 4)
					} else {
						out.Permissions = []uuid.UUID{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v22 uuid.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v22).UnmarshalText(data))
					}
					out.Permissions = append(out.Permissions, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp9(out *jwriter.Writer, in PermissionCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"permissionName\":"
		out.RawString(prefix[1:])
		if in.PermissionName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PermissionName))
		}
	}
	{
		const prefix string = ",\"uri\":"
		out.RawString(prefix)
		if in.URI == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.URI))
		}
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		if in.Method == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Method))
		}
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Permissions {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.RawText((v24).MarshalText())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PermissionCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PermissionCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp9(l, v)
}
func easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp10(in *jlexer.Lexer, out *Permission4235299754Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Permission4235299754Views, 0, 8)
			} else {
				*out = Permission4235299754Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v25 *Permission4235299754View
			if in.IsNull() {
				in.Skip()
				v25 = nil
			} else {
				if v25 == nil {
					v25 = new(Permission4235299754View)
				}
				(*v25).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v25)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp10(out *jwriter.Writer, in Permission4235299754Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v26, v27 := range in {
			if v26 > 0 {
				out.RawByte(',')
			}
			if v27 == nil {
				out.RawString("null")
			} else {
				(*v27).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Permission4235299754Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Permission4235299754Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp10(l, v)
}
func easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp11(in *jlexer.Lexer, out *Permission4235299754View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "permissionName":
			out.PermissionName = string(in.String())
		case "uri":
			out.URI = string(in.String())
		case "method":
			out.Method = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp11(out *jwriter.Writer, in Permission4235299754View) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	if in.PermissionName != "" {
		const prefix string = ",\"permissionName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PermissionName))
	}
	if in.URI != "" {
		const prefix string = ",\"uri\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URI))
	}
	if in.Method != "" {
		const prefix string = ",\"method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Method))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Permission4235299754View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp11(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Permission4235299754View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp11(l, v)
}
func easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp12(in *jlexer.Lexer, out *ErrResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "status":
			out.Status = string(in.String())
		case "errors":
			if m, ok := out.Errors.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Errors.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Errors = in.Interface()
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp12(out *jwriter.Writer, in ErrResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	if in.Errors != nil {
		const prefix string = ",\"errors\":"
		out.RawString(prefix)
		if m, ok := in.Errors.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Errors.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Errors))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp12(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp12(l, v)
}
func easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp13(in *jlexer.Lexer, out *AccountUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			if in.IsNull() {
				in.Skip()
				out.Username = nil
			} else {
				if out.Username == nil {
					out.Username = new(string)
				}
				*out.Username = string(in.String())
			}
		case "password":
			if in.IsNull() {
				in.Skip()
				out.Password = nil
			} else {
				if out.Password == nil {
					out.Password = new(string)
				}
				*out.Password = string(in.String())
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		case "phoneNumber":
			if in.IsNull() {
				in.Skip()
				out.PhoneNumber = nil
			} else {
				if out.PhoneNumber == nil {
					out.PhoneNumber = new(string)
				}
				*out.PhoneNumber = string(in.String())
			}
		case "oAuthType":
			if in.IsNull() {
				in.Skip()
				out.OAuthType = nil
			} else {
				if out.OAuthType == nil {
					out.OAuthType = new(account.OAuthType)
				}
				*out.OAuthType = account.OAuthType(in.String())
			}
		case "role":
			if in.IsNull() {
				in.Skip()
				out.Role = nil
			} else {
				if out.Role == nil {
					out.Role = new(uuid.UUID)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.Role).UnmarshalText(data))
				}
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp13(out *jwriter.Writer, in AccountUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		if in.Username == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Username))
		}
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		if in.Password == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Password))
		}
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		if in.Email == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Email))
		}
	}
	{
		const prefix string = ",\"phoneNumber\":"
		out.RawString(prefix)
		if in.PhoneNumber == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PhoneNumber))
		}
	}
	{
		const prefix string = ",\"oAuthType\":"
		out.RawString(prefix)
		if in.OAuthType == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.OAuthType))
		}
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		if in.Role == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.Role).MarshalText())
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp13(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp13(l, v)
}
func easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp14(in *jlexer.Lexer, out *AccountCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			if in.IsNull() {
				in.Skip()
				out.Username = nil
			} else {
				if out.Username == nil {
					out.Username = new(string)
				}
				*out.Username = string(in.String())
			}
		case "password":
			if in.IsNull() {
				in.Skip()
				out.Password = nil
			} else {
				if out.Password == nil {
					out.Password = new(string)
				}
				*out.Password = string(in.String())
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		case "phoneNumber":
			if in.IsNull() {
				in.Skip()
				out.PhoneNumber = nil
			} else {
				if out.PhoneNumber == nil {
					out.PhoneNumber = new(string)
				}
				*out.PhoneNumber = string(in.String())
			}
		case "oAuthType":
			if in.IsNull() {
				in.Skip()
				out.OAuthType = nil
			} else {
				if out.OAuthType == nil {
					out.OAuthType = new(account.OAuthType)
				}
				*out.OAuthType = account.OAuthType(in.String())
			}
		case "role":
			if in.IsNull() {
				in.Skip()
				out.Role = nil
			} else {
				if out.Role == nil {
					out.Role = new(uuid.UUID)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.Role).UnmarshalText(data))
				}
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp14(out *jwriter.Writer, in AccountCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		if in.Username == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Username))
		}
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		if in.Password == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Password))
		}
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		if in.Email == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Email))
		}
	}
	{
		const prefix string = ",\"phoneNumber\":"
		out.RawString(prefix)
		if in.PhoneNumber == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PhoneNumber))
		}
	}
	{
		const prefix string = ",\"oAuthType\":"
		out.RawString(prefix)
		if in.OAuthType == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.OAuthType))
		}
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		if in.Role == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.Role).MarshalText())
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp14(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp14(l, v)
}
func easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp15(in *jlexer.Lexer, out *Account2555118887Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Account2555118887Views, 0, 8)
			} else {
				*out = Account2555118887Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v28 *Account2555118887View
			if in.IsNull() {
				in.Skip()
				v28 = nil
			} else {
				if v28 == nil {
					v28 = new(Account2555118887View)
				}
				(*v28).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v28)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp15(out *jwriter.Writer, in Account2555118887Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v29, v30 := range in {
			if v29 > 0 {
				out.RawByte(',')
			}
			if v30 == nil {
				out.RawString("null")
			} else {
				(*v30).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Account2555118887Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp15(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Account2555118887Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp15(l, v)
}
func easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp16(in *jlexer.Lexer, out *Account2555118887View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "username":
			out.Username = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "phoneNumber":
			out.PhoneNumber = string(in.String())
		case "oAuthType":
			out.OAuthType = account.OAuthType(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp16(out *jwriter.Writer, in Account2555118887View) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.PhoneNumber != "" {
		const prefix string = ",\"phoneNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PhoneNumber))
	}
	if in.OAuthType != "" {
		const prefix string = ",\"oAuthType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OAuthType))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Account2555118887View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp16(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Account2555118887View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComTuanngoo192003GatewayDemoGoAuthserviceDomainEntHttp16(l, v)
}
