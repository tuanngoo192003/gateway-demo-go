// Code generated by ent, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/mailru/easyjson"
	"github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent"
	account "github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/account"
	"github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/permission"
	role "github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/role"
	"go.uber.org/zap"
)

// Role fetches the ent.role attached to the ent.Account
// identified by a given url-parameter from the database and renders it to the client.
func (h AccountHandler) Role(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Role"))
	// ID is URL parameter.
	id, err := uuid.Parse(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be a valid UUID")
		return
	}
	// Create the query to fetch the role attached to this account
	q := h.client.Account.Query().Where(account.ID(id)).QueryRole()
	e, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", id.String()))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.String("id", id.String()))
			BadRequest(w, msg)
		default:
			l.Error("could-not-read-account", zap.Error(err), zap.String("id", id.String()))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("role rendered", zap.String("id", e.ID.String()))
	easyjson.MarshalToHTTPResponseWriter(NewRole736703411View(e), w)
}

// Permissions fetches the ent.permissions attached to the ent.Permission
// identified by a given url-parameter from the database and renders it to the client.
func (h PermissionHandler) Permissions(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Permissions"))
	// ID is URL parameter.
	id, err := uuid.Parse(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be a valid UUID")
		return
	}
	// Create the query to fetch the permissions attached to this permission
	q := h.client.Permission.Query().Where(permission.ID(id)).QueryPermissions()
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			BadRequest(w, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			BadRequest(w, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching permissions from db", zap.Error(err))
		InternalServerError(w, nil)
		return
	}
	l.Info("permissions rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewPermission4235299754Views(es), w)
}

// Permissions fetches the ent.permissions attached to the ent.Role
// identified by a given url-parameter from the database and renders it to the client.
func (h RoleHandler) Permissions(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Permissions"))
	// ID is URL parameter.
	id, err := uuid.Parse(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be a valid UUID")
		return
	}
	// Create the query to fetch the permissions attached to this role
	q := h.client.Role.Query().Where(role.ID(id)).QueryPermissions()
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			BadRequest(w, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			BadRequest(w, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching permissions from db", zap.Error(err))
		InternalServerError(w, nil)
		return
	}
	l.Info("permissions rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewPermission4235299754Views(es), w)
}

// Accounts fetches the ent.accounts attached to the ent.Role
// identified by a given url-parameter from the database and renders it to the client.
func (h RoleHandler) Accounts(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Accounts"))
	// ID is URL parameter.
	id, err := uuid.Parse(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be a valid UUID")
		return
	}
	// Create the query to fetch the accounts attached to this role
	q := h.client.Role.Query().Where(role.ID(id)).QueryAccounts()
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			BadRequest(w, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			BadRequest(w, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching accounts from db", zap.Error(err))
		InternalServerError(w, nil)
		return
	}
	l.Info("accounts rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewAccount2555118887Views(es), w)
}
