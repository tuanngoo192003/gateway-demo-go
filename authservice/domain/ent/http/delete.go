// Code generated by ent, DO NOT EDIT.

package http

import (
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent"
	"go.uber.org/zap"
)

// Delete removes a ent.Account from the database.
func (h AccountHandler) Delete(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id, err := uuid.Parse(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be a valid UUID")
		return
	}
	err = h.client.Account.DeleteOneID(uuid.UUID(id)).Exec(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", id.String()))
			NotFound(w, msg)
		default:
			l.Error("could-not-delete-account", zap.Error(err), zap.String("id", id.String()))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("account deleted", zap.String("id", id.String()))
	w.WriteHeader(http.StatusNoContent)
}

// Delete removes a ent.Permission from the database.
func (h PermissionHandler) Delete(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id, err := uuid.Parse(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be a valid UUID")
		return
	}
	err = h.client.Permission.DeleteOneID(uuid.UUID(id)).Exec(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", id.String()))
			NotFound(w, msg)
		default:
			l.Error("could-not-delete-permission", zap.Error(err), zap.String("id", id.String()))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("permission deleted", zap.String("id", id.String()))
	w.WriteHeader(http.StatusNoContent)
}

// Delete removes a ent.RefreshToken from the database.
func (h RefreshTokenHandler) Delete(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id, err := uuid.Parse(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be a valid UUID")
		return
	}
	err = h.client.RefreshToken.DeleteOneID(uuid.UUID(id)).Exec(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", id.String()))
			NotFound(w, msg)
		default:
			l.Error("could-not-delete-refresh-token", zap.Error(err), zap.String("id", id.String()))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("refresh-token deleted", zap.String("id", id.String()))
	w.WriteHeader(http.StatusNoContent)
}

// Delete removes a ent.Role from the database.
func (h RoleHandler) Delete(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id, err := uuid.Parse(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be a valid UUID")
		return
	}
	err = h.client.Role.DeleteOneID(uuid.UUID(id)).Exec(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", id.String()))
			NotFound(w, msg)
		default:
			l.Error("could-not-delete-role", zap.Error(err), zap.String("id", id.String()))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("role deleted", zap.String("id", id.String()))
	w.WriteHeader(http.StatusNoContent)
}
