// Code generated by ent, DO NOT EDIT.

package http

import (
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/mailru/easyjson"
	"github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent"
	account "github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/account"
	"github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/permission"
	"github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/refreshtoken"
	role "github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/role"
	"go.uber.org/zap"
)

// Read fetches the ent.Account identified by a given url-parameter from the
// database and renders it to the client.
func (h *AccountHandler) Read(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Read"))
	// ID is URL parameter.
	id, err := uuid.Parse(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be a valid UUID")
		return
	}
	// Create the query to fetch the Account
	q := h.client.Account.Query().Where(account.ID(uuid.UUID(id)))
	e, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", id.String()))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.String("id", id.String()))
			BadRequest(w, msg)
		default:
			l.Error("could not read account", zap.Error(err), zap.String("id", id.String()))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("account rendered", zap.String("id", id.String()))
	easyjson.MarshalToHTTPResponseWriter(NewAccount2555118887View(e), w)
}

// Read fetches the ent.Permission identified by a given url-parameter from the
// database and renders it to the client.
func (h *PermissionHandler) Read(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Read"))
	// ID is URL parameter.
	id, err := uuid.Parse(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be a valid UUID")
		return
	}
	// Create the query to fetch the Permission
	q := h.client.Permission.Query().Where(permission.ID(uuid.UUID(id)))
	e, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", id.String()))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.String("id", id.String()))
			BadRequest(w, msg)
		default:
			l.Error("could not read permission", zap.Error(err), zap.String("id", id.String()))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("permission rendered", zap.String("id", id.String()))
	easyjson.MarshalToHTTPResponseWriter(NewPermission4235299754View(e), w)
}

// Read fetches the ent.RefreshToken identified by a given url-parameter from the
// database and renders it to the client.
func (h *RefreshTokenHandler) Read(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Read"))
	// ID is URL parameter.
	id, err := uuid.Parse(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be a valid UUID")
		return
	}
	// Create the query to fetch the RefreshToken
	q := h.client.RefreshToken.Query().Where(refreshtoken.ID(uuid.UUID(id)))
	e, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", id.String()))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.String("id", id.String()))
			BadRequest(w, msg)
		default:
			l.Error("could not read refresh-token", zap.Error(err), zap.String("id", id.String()))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("refresh-token rendered", zap.String("id", id.String()))
	easyjson.MarshalToHTTPResponseWriter(NewRefreshToken3828610044View(e), w)
}

// Read fetches the ent.Role identified by a given url-parameter from the
// database and renders it to the client.
func (h *RoleHandler) Read(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Read"))
	// ID is URL parameter.
	id, err := uuid.Parse(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be a valid UUID")
		return
	}
	// Create the query to fetch the Role
	q := h.client.Role.Query().Where(role.ID(uuid.UUID(id)))
	e, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", id.String()))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.String("id", id.String()))
			BadRequest(w, msg)
		default:
			l.Error("could not read role", zap.Error(err), zap.String("id", id.String()))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("role rendered", zap.String("id", id.String()))
	easyjson.MarshalToHTTPResponseWriter(NewRole736703411View(e), w)
}
