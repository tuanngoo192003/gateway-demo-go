// Code generated by ent, DO NOT EDIT.

package http

import (
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/mailru/easyjson"
	"github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent"
	account "github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/account"
	"github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/permission"
	"github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/refreshtoken"
	role "github.com/tuanngoo192003/gateway-demo-go/authservice/domain/ent/role"
	"go.uber.org/zap"
)

// Update updates a given ent.Account and saves the changes to the database.
func (h AccountHandler) Update(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Update"))
	// ID is URL parameter.
	id, err := uuid.Parse(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be a valid UUID")
		return
	}
	// Get the post data.
	var d AccountUpdateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		BadRequest(w, "invalid json string")
		return
	}
	// Save the data.
	b := h.client.Account.UpdateOneID(uuid.UUID(id))
	if d.Username != nil {
		b.SetUsername(*d.Username)
	}
	if d.Password != nil {
		b.SetPassword(*d.Password)
	}
	if d.Email != nil {
		b.SetEmail(*d.Email)
	}
	if d.PhoneNumber != nil {
		b.SetPhoneNumber(*d.PhoneNumber)
	}
	if d.OAuthType != nil {
		b.SetOAuthType(*d.OAuthType)
	}
	if d.Role != nil {
		b.SetRoleID(*d.Role)

	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", id.String()))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.String("id", id.String()))
			BadRequest(w, msg)
		default:
			l.Error("could-not-update-account", zap.Error(err), zap.String("id", id.String()))
			InternalServerError(w, nil)
		}
		return
	}
	// Reload entry.
	q := h.client.Account.Query().Where(account.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", id.String()))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.String("id", id.String()))
			BadRequest(w, msg)
		default:
			l.Error("could-not-read-account", zap.Error(err), zap.String("id", id.String()))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("account rendered", zap.String("id", id.String()))
	easyjson.MarshalToHTTPResponseWriter(NewAccount2555118887View(e), w)
}

// Update updates a given ent.Permission and saves the changes to the database.
func (h PermissionHandler) Update(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Update"))
	// ID is URL parameter.
	id, err := uuid.Parse(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be a valid UUID")
		return
	}
	// Get the post data.
	var d PermissionUpdateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		BadRequest(w, "invalid json string")
		return
	}
	// Validate the data.
	errs := make(map[string]string)
	if d.PermissionName == nil {
		errs["permissionName"] = `missing required field: "permissionName"`
	} else if err := permission.PermissionNameValidator(*d.PermissionName); err != nil {
		errs["permissionName"] = strings.TrimPrefix(err.Error(), "permission: ")
	}
	if d.URI == nil {
		errs["uri"] = `missing required field: "uri"`
	} else if err := permission.URIValidator(*d.URI); err != nil {
		errs["uri"] = strings.TrimPrefix(err.Error(), "permission: ")
	}
	if d.Method == nil {
		errs["method"] = `missing required field: "method"`
	} else if err := permission.MethodValidator(*d.Method); err != nil {
		errs["method"] = strings.TrimPrefix(err.Error(), "permission: ")
	}
	if len(errs) > 0 {
		l.Info("validation failed", zapFields(errs)...)
		BadRequest(w, errs)
		return
	}
	// Save the data.
	b := h.client.Permission.UpdateOneID(uuid.UUID(id))
	if d.PermissionName != nil {
		b.SetPermissionName(*d.PermissionName)
	}
	if d.URI != nil {
		b.SetURI(*d.URI)
	}
	if d.Method != nil {
		b.SetMethod(*d.Method)
	}
	if d.Permissions != nil {
		b.ClearPermissions().AddPermissionIDs(d.Permissions...)
	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", id.String()))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.String("id", id.String()))
			BadRequest(w, msg)
		default:
			l.Error("could-not-update-permission", zap.Error(err), zap.String("id", id.String()))
			InternalServerError(w, nil)
		}
		return
	}
	// Reload entry.
	q := h.client.Permission.Query().Where(permission.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", id.String()))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.String("id", id.String()))
			BadRequest(w, msg)
		default:
			l.Error("could-not-read-permission", zap.Error(err), zap.String("id", id.String()))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("permission rendered", zap.String("id", id.String()))
	easyjson.MarshalToHTTPResponseWriter(NewPermission4235299754View(e), w)
}

// Update updates a given ent.RefreshToken and saves the changes to the database.
func (h RefreshTokenHandler) Update(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Update"))
	// ID is URL parameter.
	id, err := uuid.Parse(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be a valid UUID")
		return
	}
	// Get the post data.
	var d RefreshTokenUpdateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		BadRequest(w, "invalid json string")
		return
	}
	// Save the data.
	b := h.client.RefreshToken.UpdateOneID(uuid.UUID(id))
	if d.Username != nil {
		b.SetUsername(*d.Username)
	}
	if d.Token != nil {
		b.SetToken(*d.Token)
	}
	if d.ExpiredAt != nil {
		b.SetExpiredAt(*d.ExpiredAt)
	}
	if d.RoleName != nil {
		b.SetRoleName(*d.RoleName)
	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", id.String()))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.String("id", id.String()))
			BadRequest(w, msg)
		default:
			l.Error("could-not-update-refresh-token", zap.Error(err), zap.String("id", id.String()))
			InternalServerError(w, nil)
		}
		return
	}
	// Reload entry.
	q := h.client.RefreshToken.Query().Where(refreshtoken.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", id.String()))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.String("id", id.String()))
			BadRequest(w, msg)
		default:
			l.Error("could-not-read-refresh-token", zap.Error(err), zap.String("id", id.String()))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("refresh-token rendered", zap.String("id", id.String()))
	easyjson.MarshalToHTTPResponseWriter(NewRefreshToken3828610044View(e), w)
}

// Update updates a given ent.Role and saves the changes to the database.
func (h RoleHandler) Update(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Update"))
	// ID is URL parameter.
	id, err := uuid.Parse(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be a valid UUID")
		return
	}
	// Get the post data.
	var d RoleUpdateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		BadRequest(w, "invalid json string")
		return
	}
	// Save the data.
	b := h.client.Role.UpdateOneID(uuid.UUID(id))
	if d.RoleName != nil {
		b.SetRoleName(*d.RoleName)
	}
	if d.Description != nil {
		b.SetDescription(*d.Description)
	}
	if d.Permissions != nil {
		b.ClearPermissions().AddPermissionIDs(d.Permissions...)
	}
	if d.Accounts != nil {
		b.ClearAccounts().AddAccountIDs(d.Accounts...)
	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", id.String()))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.String("id", id.String()))
			BadRequest(w, msg)
		default:
			l.Error("could-not-update-role", zap.Error(err), zap.String("id", id.String()))
			InternalServerError(w, nil)
		}
		return
	}
	// Reload entry.
	q := h.client.Role.Query().Where(role.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", id.String()))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.String("id", id.String()))
			BadRequest(w, msg)
		default:
			l.Error("could-not-read-role", zap.Error(err), zap.String("id", id.String()))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("role rendered", zap.String("id", id.String()))
	easyjson.MarshalToHTTPResponseWriter(NewRole736703411View(e), w)
}
